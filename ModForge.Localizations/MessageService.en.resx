<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Armors" xml:space="preserve">
    <value>Armors</value>
  </data>
  <data name="AvailableMods" xml:space="preserve">
    <value>Available Mods</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="BrowseModItems" xml:space="preserve">
    <value>Browse Mod Items</value>
  </data>
  <data name="Buffs" xml:space="preserve">
    <value>Buffs</value>
  </data>
  <data name="Class" xml:space="preserve">
    <value>Class</value>
  </data>
  <data name="Clear" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="ClearInfo" xml:space="preserve">
    <value>Clears currently selected file</value>
  </data>
  <data name="Consumables" xml:space="preserve">
    <value>Consumables</value>
  </data>
  <data name="CopyCommand" xml:space="preserve">
    <value>Copy Command</value>
  </data>
  <data name="CopyId" xml:space="preserve">
    <value>Copy Id</value>
  </data>
  <data name="CraftingItems" xml:space="preserve">
    <value>Crafting Items</value>
  </data>
  <data name="CreatedMods" xml:space="preserve">
    <value>Created Mods</value>
  </data>
  <data name="CreateMod" xml:space="preserve">
    <value>Create Mod</value>
  </data>
  <data name="Dashboard" xml:space="preserve">
    <value>Dashboard</value>
  </data>
  <data name="DeleteMod" xml:space="preserve">
    <value>Delete Mod</value>
  </data>
  <data name="Duplicate" xml:space="preserve">
    <value>Duplicate</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EntryDialogButtonText" xml:space="preserve">
    <value>Bring me the sacred data</value>
  </data>
  <data name="EntryDialogHeader" xml:space="preserve">
    <value>A Peasant With No Pitchfork entered</value>
  </data>
  <data name="EntryDialogLine1" xml:space="preserve">
    <value>You've launched ModForge for the first time, which probably means you're ready to start shaping the world—or at least breaking it in style.
</value>
  </data>
  <data name="EntryDialogLine2" xml:space="preserve">
    <value>A noble sentiment indeed.</value>
  </data>
  <data name="EntryDialogLine3" xml:space="preserve">
    <value>But hold, noble tinkerer! Before we begin, there's one small issue: we're missing the sacred game data.</value>
  </data>
  <data name="EntryDialogLine4" xml:space="preserve">
    <value>Go to Settings, perform the ritual, and import the files. Only then shall the forge be lit.</value>
  </data>
  <data name="EntryDialogLine5" xml:space="preserve">
    <value>No data, no glory. No glory, no mods.</value>
  </data>
  <data name="EntryDialogLine6" xml:space="preserve">
    <value>Now set out on your path, and prove you’re more than just another drunk at the tavern bragging about “big plans.”</value>
  </data>
  <data name="EntryDialogTitle" xml:space="preserve">
    <value>"I’m feeling quite hungry - for mods."</value>
  </data>
  <data name="Export" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="ExternalMods" xml:space="preserve">
    <value>External Mods</value>
  </data>
  <data name="FilePickerInfo" xml:space="preserve">
    <value>Opens file explorer, to select mod on your harddrive</value>
  </data>
  <data name="FileUploadInfo1" xml:space="preserve">
    <value>Drag and drop files here or click</value>
  </data>
  <data name="FileUploadInfo2" xml:space="preserve">
    <value>Supported file formats: .zip, .rar, .7z, .gzip, .tar</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="Implementation" xml:space="preserve">
    <value>Implementation</value>
  </data>
  <data name="InstallMod" xml:space="preserve">
    <value>Install Mod</value>
  </data>
  <data name="InstallModInfo" xml:space="preserve">
    <value>Installs currently selected mod</value>
  </data>
  <data name="InventoryPresets" xml:space="preserve">
    <value>Inventory Presets</value>
  </data>
  <data name="Items" xml:space="preserve">
    <value>Items</value>
  </data>
  <data name="LanguageKey" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="LoadoutEmptyInfo" xml:space="preserve">
    <value>Emptys the current loadout of this savefile</value>
  </data>
  <data name="Loadouts" xml:space="preserve">
    <value>Mod Loadouts</value>
  </data>
  <data name="Miscellaneous" xml:space="preserve">
    <value>Miscellaneous</value>
  </data>
  <data name="MiscItems" xml:space="preserve">
    <value>Misc Items</value>
  </data>
  <data name="ModdedIngots" xml:space="preserve">
    <value>Modded Ingots</value>
  </data>
  <data name="ModEffects" xml:space="preserve">
    <value>Mod Effects</value>
  </data>
  <data name="NewModButton" xml:space="preserve">
    <value>New Mod</value>
  </data>
  <data name="NewModInputInvalid" xml:space="preserve">
    <value>Fill out the form, peasant!</value>
  </data>
  <data name="NewModInputValid" xml:space="preserve">
    <value>Let the modding begin</value>
  </data>
  <data name="OpenFilePicker" xml:space="preserve">
    <value>Open File Picker</value>
  </data>
  <data name="OpenFolder" xml:space="preserve">
    <value>Open Folder</value>
  </data>
  <data name="Overview" xml:space="preserve">
    <value>Overview</value>
  </data>
  <data name="Perks" xml:space="preserve">
    <value>Perks</value>
  </data>
  <data name="ResetAll" xml:space="preserve">
    <value>Reset All</value>
  </data>
  <data name="RPGParameter" xml:space="preserve">
    <value>RPG-Parameter</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SaveFileLoadout" xml:space="preserve">
    <value>Save File Loadout</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SelectForMore" xml:space="preserve">
    <value>Select element for more details</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Skill" xml:space="preserve">
    <value>Skill</value>
  </data>
  <data name="StartModding" xml:space="preserve">
    <value>Start Modding</value>
  </data>
  <data name="STORM" xml:space="preserve">
    <value>STORM</value>
  </data>
  <data name="UseLoadout" xml:space="preserve">
    <value>Use Loadout</value>
  </data>
  <data name="Weapons" xml:space="preserve">
    <value>Weapons</value>
  </data>
  <data name="Author" xml:space="preserve">
    <value>Author</value>
  </data>
  <data name="ModVersion" xml:space="preserve">
    <value>Mod Version</value>
  </data>
  <data name="CreatedOn" xml:space="preserve">
    <value>Created On</value>
  </data>
  <data name="ModId" xml:space="preserve">
    <value>Mod ID</value>
  </data>
  <data name="ModifiesLevel" xml:space="preserve">
    <value>Modifies Level</value>
  </data>
  <data name="ModVersionSupport" xml:space="preserve">
    <value>Add Version Support</value>
  </data>
  <data name="Version" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="UserNameInfo" xml:space="preserve">
    <value>Henry was taken. Pick your own.</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>User Name</value>
  </data>
  <data name="PathInfo" xml:space="preserve">
    <value>This is the path. The one true path.</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="BuffParameter" xml:space="preserve">
    <value>Buff Parameter</value>
  </data>
  <data name="Abbreviation" xml:space="preserve">
    <value>Abbreviation</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Definition" xml:space="preserve">
    <value>Definition</value>
  </data>
  <data name="ThanksForNothing" xml:space="preserve">
    <value>Thanks for nothing...</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ModName" xml:space="preserve">
    <value>Mod Name</value>
  </data>
  <data name="ModDescription" xml:space="preserve">
    <value>Mod Description</value>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="ModAuthor" xml:space="preserve">
    <value>Mod Author</value>
  </data>
</root>