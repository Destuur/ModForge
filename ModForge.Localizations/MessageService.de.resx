<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Armors" xml:space="preserve">
    <value>Rüstungen</value>
  </data>
  <data name="AvailableMods" xml:space="preserve">
    <value>Verfügbare Mods</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>Zurück</value>
  </data>
  <data name="BrowseModItems" xml:space="preserve">
    <value>Mod-Elemente durchsuchen</value>
  </data>
  <data name="Buffs" xml:space="preserve">
    <value>Buffs</value>
  </data>
  <data name="Class" xml:space="preserve">
    <value>Klasse</value>
  </data>
  <data name="Clear" xml:space="preserve">
    <value>Entfernen</value>
  </data>
  <data name="ClearInfo" xml:space="preserve">
    <value>Entfernt ausgewählte Datei</value>
  </data>
  <data name="Consumables" xml:space="preserve">
    <value>Verbrauchsgegenstände</value>
  </data>
  <data name="CopyCommand" xml:space="preserve">
    <value>Befehl kopieren</value>
  </data>
  <data name="CopyId" xml:space="preserve">
    <value>ID kopieren</value>
  </data>
  <data name="CraftingItems" xml:space="preserve">
    <value>Handwerksmaterialien</value>
  </data>
  <data name="CreatedMods" xml:space="preserve">
    <value>Erstellte Mods</value>
  </data>
  <data name="CreateMod" xml:space="preserve">
    <value>Erstellte Mod</value>
  </data>
  <data name="Dashboard" xml:space="preserve">
    <value>Dashboard</value>
  </data>
  <data name="DeleteMod" xml:space="preserve">
    <value>Mod löschen</value>
  </data>
  <data name="Duplicate" xml:space="preserve">
    <value>Duplizieren</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Mod bearbeiten</value>
  </data>
  <data name="EntryDialogButtonText" xml:space="preserve">
    <value>Bring mir die heiligen Daten!</value>
  </data>
  <data name="EntryDialogHeader" xml:space="preserve">
    <value>Ein Bauer ohne Heugabel hat Einlass gefunden</value>
  </data>
  <data name="EntryDialogLine1" xml:space="preserve">
    <value>Du hast ModForge zum ersten Mal entfesselt – was wohl bedeutet, dass du nun bereit bist, die Welt zu formen… oder sie zumindest stilvoll ins Chaos zu stürzen.</value>
  </data>
  <data name="EntryDialogLine2" xml:space="preserve">
    <value>Ein edles Ansinnen, wahrlich.</value>
  </data>
  <data name="EntryDialogLine3" xml:space="preserve">
    <value>Doch halt, edler Tüftler! Ehe wir beginnen können, fehlt uns ein kleines Etwas: die heiligen Spieldaten.</value>
  </data>
  <data name="EntryDialogLine4" xml:space="preserve">
    <value>Öffne die Einstellungen, vollführe das uralte Ritual und importiere die Dateien. Erst dann wird die Schmiede entfacht.</value>
  </data>
  <data name="EntryDialogLine5" xml:space="preserve">
    <value>Keine Daten, kein Ruhm. Kein Ruhm, keine Mods.</value>
  </data>
  <data name="EntryDialogLine6" xml:space="preserve">
    <value>So zieh hinaus und beweise, dass du mehr bist als ein weiterer Zecher in der Taverne, der von „großen Plänen“ redet.</value>
  </data>
  <data name="EntryDialogTitle" xml:space="preserve">
    <value>„Ich verspüre einen mächtigen Hunger – nach Mods.“</value>
  </data>
  <data name="Export" xml:space="preserve">
    <value>Exportieren</value>
  </data>
  <data name="ExternalMods" xml:space="preserve">
    <value>Externe Mods</value>
  </data>
  <data name="FilePickerInfo" xml:space="preserve">
    <value>Dateiexplorer öffnen, um eine Mod von deiner Festplatte auszuwählen</value>
  </data>
  <data name="FileUploadInfo1" xml:space="preserve">
    <value>Dateien per Drag &amp; Drop hier ablegen oder klicken</value>
  </data>
  <data name="FileUploadInfo2" xml:space="preserve">
    <value>Unterstützte Dateiformate: .zip, .rar, .7z, .gzip, .tar</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Hilfe</value>
  </data>
  <data name="Implementation" xml:space="preserve">
    <value>Implementierung</value>
  </data>
  <data name="InstallMod" xml:space="preserve">
    <value>Mod installieren</value>
  </data>
  <data name="InstallModInfo" xml:space="preserve">
    <value>Installiert die aktuell ausgewählte Mod</value>
  </data>
  <data name="InventoryPresets" xml:space="preserve">
    <value>Inventar-Voreinstellungen</value>
  </data>
  <data name="Items" xml:space="preserve">
    <value>Gegenstände</value>
  </data>
  <data name="LanguageKey" xml:space="preserve">
    <value>Deutsch</value>
  </data>
  <data name="LoadoutEmptyInfo" xml:space="preserve">
    <value>Leert das aktuelle Loadout dieses Spielstands</value>
  </data>
  <data name="Loadouts" xml:space="preserve">
    <value>Mod Loadouts</value>
  </data>
  <data name="Miscellaneous" xml:space="preserve">
    <value>Sonstiges</value>
  </data>
  <data name="MiscItems" xml:space="preserve">
    <value>Verschiedene Gegenstände</value>
  </data>
  <data name="ModdedIngots" xml:space="preserve">
    <value>Gemoddete Eisen</value>
  </data>
  <data name="ModEffects" xml:space="preserve">
    <value>Mod Effekte</value>
  </data>
  <data name="NewModButton" xml:space="preserve">
    <value>Neue Mod</value>
  </data>
  <data name="NewModInputInvalid" xml:space="preserve">
    <value>Füll das Formular aus, Bauer!</value>
  </data>
  <data name="NewModInputValid" xml:space="preserve">
    <value>Lasst das Modden beginnen</value>
  </data>
  <data name="OpenFilePicker" xml:space="preserve">
    <value>Dateiauswahl öffnen</value>
  </data>
  <data name="OpenFolder" xml:space="preserve">
    <value>Ordner öffnen</value>
  </data>
  <data name="Overview" xml:space="preserve">
    <value>Übersicht</value>
  </data>
  <data name="Perks" xml:space="preserve">
    <value>Perks</value>
  </data>
  <data name="ResetAll" xml:space="preserve">
    <value>Alles zurücksetzen</value>
  </data>
  <data name="RPGParameter" xml:space="preserve">
    <value>RPG-Parameter</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Speichern</value>
  </data>
  <data name="SaveFileLoadout" xml:space="preserve">
    <value>Loadout speichern</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Suchen</value>
  </data>
  <data name="SelectForMore" xml:space="preserve">
    <value>Element auswählen für mehr Details</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Einstellungen</value>
  </data>
  <data name="Skill" xml:space="preserve">
    <value>Skill</value>
  </data>
  <data name="StartModding" xml:space="preserve">
    <value>Modding Starten</value>
  </data>
  <data name="STORM" xml:space="preserve">
    <value>STORM</value>
  </data>
  <data name="UseLoadout" xml:space="preserve">
    <value>Loadout übernehmen</value>
  </data>
  <data name="Weapons" xml:space="preserve">
    <value>Waffen</value>
  </data>
  <data name="Author" xml:space="preserve">
    <value>Author</value>
  </data>
  <data name="ModVersion" xml:space="preserve">
    <value>Mod Version</value>
  </data>
  <data name="CreatedOn" xml:space="preserve">
    <value>Erstellt am</value>
  </data>
  <data name="ModId" xml:space="preserve">
    <value>Mod ID</value>
  </data>
  <data name="ModifiesLevel" xml:space="preserve">
    <value>Modifiziert Spielwelt</value>
  </data>
  <data name="ModVersionSupport" xml:space="preserve">
    <value>Versions Support hinzufügen</value>
  </data>
  <data name="Version" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="UserNameInfo" xml:space="preserve">
    <value>Henry ist vergeben. Such dir deinen eigenen aus.</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>User Name</value>
  </data>
  <data name="PathInfo" xml:space="preserve">
    <value>Dies ist der Pfad. Der eine wahre Pfad.</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Sprache</value>
  </data>
  <data name="BuffParameter" xml:space="preserve">
    <value>Buff Parameter</value>
  </data>
  <data name="Abbreviation" xml:space="preserve">
    <value>Abkürzung</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Definition" xml:space="preserve">
    <value>Erklärung</value>
  </data>
  <data name="ThanksForNothing" xml:space="preserve">
    <value>Danke für nichts...</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Abbrechen</value>
  </data>
  <data name="ModName" xml:space="preserve">
    <value>Mod Name</value>
  </data>
  <data name="ModDescription" xml:space="preserve">
    <value>Mod Beschreibung</value>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Zurücksetzen</value>
  </data>
  <data name="ModAuthor" xml:space="preserve">
    <value>Mod-Autor</value>
  </data>
</root>