@using ModForge.Shared.Models.Abstractions
@using ModForge.Shared.Models.ModItems

@if (Mods is not null)
{
	<MudGrid Spacing="2" Class="pr-2" Justify="Justify.FlexStart">
		@foreach (var mod in Mods)
		{
			<MudItem md="3" lg="2">
				<MudCard Class="mod-item-card" Style="border-radius: 8px; position: relative;" Elevation="10">
					<div style="position: absolute; background: linear-gradient(180deg,rgba(255, 166, 0, 0) 0%, var(--background) 100%); width: 100%; height: 100%; border-radius: inherit;" class="mod-item-hidden">
						<MudStack Row Justify="Justify.SpaceEvenly" AlignItems="AlignItems.End" Style="height: 100%;">

							<MudTooltip Text="Edit Mod" Placement="Placement.Top">
								<MudIconButton Style="cursor: pointer;" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => EditMod(mod.Id))" />
							</MudTooltip>

							<MudTooltip Text="Export" Placement="Placement.Top">
								<MudIconButton Style="cursor: pointer;" Icon="@Icons.Material.Outlined.Download" OnClick="@(() => ExportMod(mod))" />
							</MudTooltip>

							<MudTooltip Text="Open Folder" Placement="Placement.Top">
								<MudIconButton Style="cursor: pointer;" Icon="@Icons.Material.Outlined.Folder" OnClick="@(() => GoToDirectory(mod))" />
							</MudTooltip>

						</MudStack>
					</div>
					<MudStack Spacing="0" Class="px-3 py-3">
						<MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" class="pb-2">
							<MudText Typo="Typo.subtitle1" Style="font-weight: bold; line-height: 1; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 100%;">@mod.Name</MudText>
							<MudTooltip Text="Delete Mod" Placement="Placement.Top">
								<MudIconButton Icon="@Icons.Material.Outlined.Cancel" Size="Size.Small" Color="Color.Error" Class="pa-0 ma-n1 mod-item-hidden" OnClick="@(() => DeleteMod(mod))" />
							</MudTooltip>
						</MudStack>

						<MudStack Row Justify="Justify.SpaceBetween">
							<MudText Typo="Typo.body2">Perks:</MudText>
							<MudText Typo="Typo.body2">@mod.ModItems.Where(x => x.GetType() == typeof(Perk)).Count()</MudText>
						</MudStack>
						<MudStack Row Justify="Justify.SpaceBetween">
							<MudText Typo="Typo.body2">Buffs:</MudText>
							<MudText Typo="Typo.body2">@mod.ModItems.Where(x => x.GetType() == typeof(Buff)).Count()</MudText>
						</MudStack>
						<MudStack Row Justify="Justify.SpaceBetween">
							<MudText style="color: var(--mud-palette-text-disabled)" Typo="Typo.body2">RPG Params:</MudText>
							<MudText style="color: var(--mud-palette-text-disabled)" Typo="Typo.body2">Soon</MudText>
						</MudStack>
						<MudStack Row Justify="Justify.SpaceBetween">
							<MudText style="color: var(--mud-palette-text-disabled)" Typo="Typo.body2">Items:</MudText>
							<MudText style="color: var(--mud-palette-text-disabled)" Typo="Typo.body2">@mod.ModItems.Where(x => x.GetType().GetInterface(nameof(IItem)) == typeof(IItem)).Count()</MudText>
						</MudStack>
						<MudStack Row Justify="Justify.SpaceBetween">
							<MudText style="color: var(--mud-palette-text-disabled)" Typo="Typo.body2">Inventory Presets:</MudText>
							<MudText style="color: var(--mud-palette-text-disabled)" Typo="Typo.body2">Soon</MudText>
						</MudStack>
						<MudStack Row Justify="Justify.SpaceBetween">
							<MudText style="color: var(--mud-palette-text-disabled)" Typo="Typo.body2">STORM:</MudText>
							<MudText style="color: var(--mud-palette-text-disabled)" Typo="Typo.body2">Soon</MudText>
						</MudStack>

					</MudStack>
				</MudCard>
			</MudItem>
		}
	</MudGrid>
}